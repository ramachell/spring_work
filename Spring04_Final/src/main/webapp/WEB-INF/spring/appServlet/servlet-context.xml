<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<beans:bean id="dataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName"
			value="java:comp/env/jdbc/myoracle" />
	</beans:bean>

	<!-- 위는 아래의 코드와 같다 dataSource = new JndiObjectFactoryBean(); dataSource.setJndiName("java:comp/env/jdbc/myoracle"); -->


	<!-- SqlSessionFactory 객체 Configuration.xml 문서가 어디에 있는지 알려야 한다. value 에서 
		classpath: 은 src/main/resources 폴더를 가리킨다. 따라서 classpath:Configuration.xml 
		은 src/main/resources 폴더안에 존재 해야 한다. -->
	<beans:bean id="sessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation"
			value="classpath:Configuration.xml" />
	</beans:bean>
	<!-- sessionFactory=new SqlSessionFactoryBean(); sessionFactory.setDataSource(dataSource); 
		sessionFactory.setConfigLocation("classpath:Configuration.xml"); -->



	<!-- SqlSession 인터페이스를 구현한 SqlSessionTemplate(SqlSession) 객체 Dao 가 의존하는 
		객체 -->
	<beans:bean id="sqlSessionTemplate"
		class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory"
			ref="sessionFactory" />
	</beans:bean>

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<beans:bean id="loginInterceptor"
		class="com.gura.spring04.interceptor.LoginInterceptor" />

	<!-- 인터 셉터 목록 -->
	<interceptors>
		<!-- /users/하위의 모든 요청에 대해 loginInterceptor 가 끼어 들도록 설정한다. -->
		<!-- exclude-mapping 로 제외할 주소만 따로 설정가능 로그인을 하려하는데 로그인 페이지가 막혀있으면 안되니까 -->
		<interceptor>
			<mapping path="/users/*" />
			<exclude-mapping path="/users/loginform" />
			<exclude-mapping path="/users/login" />
			<exclude-mapping path="/users/signup_form" />
			<exclude-mapping path="/users/signup" />
			<beans:ref bean="loginInterceptor" />
		</interceptor>
		<interceptor>
			<mapping path="/file/*" />
			<exclude-mapping path="/file/list" />
			<exclude-mapping path="/file/download" />
			<beans:ref bean="loginInterceptor" />
		</interceptor>
		<interceptor>
			<mapping path="/cafe/*"/>
			<mapping path="/gallery/upload_form"/>
			<exclude-mapping path="/cafe/list"/>
			<exclude-mapping path="/cafe/detail"/>
			<exclude-mapping path="/cafe/ajax_comment_list"/>
			<beans:ref bean="loginInterceptor"/>
		</interceptor>
	</interceptors>


	<context:component-scan
		base-package="com.gura.spring04" />

	<!-- Multipart 폼 전송 처리를 위한 bean 설정 최대 업로드 사이즈 제한하기 name="maxUploadSize" 
		value="byte 단위" -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="102400000" />
	</beans:bean>
	
	<!-- 
		bean 의 이름이용해서 view 이동할수 있게 설정
		setOrder(0)은 0순위로 (가장 첨으로) 찾겠단 의미
		찾아서 없으면 view 안에서 찾게됨 
		즉 controller 에서 지정해준 위치를 찾는 것 (view)
	 -->
	
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="0"></beans:property>
		
	</beans:bean>


</beans:beans>
